metadata:
  name: ${project.artifactId}
data:
  application.properties: |
    # spring application properties file
    cxf.path=/services/helloservice

    # lets listen on all ports to ensure we can be invoked from the pod IP
    server.address=0.0.0.0
    management.address=0.0.0.0

    # management port has no security (not exposed as route) override health checks in deployment.yml
    management.port=8081
    management.ssl.enabled=false
    management.security.enabled=false

    # disable all management endpoints except health
    endpoints.enabled = false
    endpoints.health.enabled = true

    # the options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
    spring.application.name=helloservice
    camel.springboot.name=helloservice

    # Enable auto-reload
    # https://github.com/fabric8io/spring-cloud-kubernetes#propertysource-reload
    spring.cloud.kubernetes.reload.enabled=true
    # this is needed for java implementation, spring refresh works for spring xml
    spring.cloud.kubernetes.reload.strategy=restart_context

    # spring bean message
    helloservice.message=default hello

    # ssl (only, no http)
    server.ssl.enabled: true
    server.port: 8443

    #server.ssl.key-store: classpath:keystore.p12
    #server.ssl.trust-store: classpath:server-truststore.jks

    # FIXME - how can we access these from secret mounted as volumes ?
    # file:/ does not work
    # api (below doesn't seem to work either)
    server.ssl.key-store-password: password
    server.ssl.trust-store-password: password

    # lets use secrets via api for passwords
    #spring.cloud.kubernetes.secrets.enableApi=true
    #spring.cloud.kubernetes.secrets.name=spring-boot-cxf-jaxrs-passwords

    server.ssl.keyStoreType: PKCS12
    server.ssl.keyAlias: secure-server
    # secrets mounted as volumes
    server.ssl.key-store: file:/etc/secret-keystores/keystore.p12
    #server.ssl.key-store-password: file:/etc/secret-passwords/server.ssl.key-store-password
    #server.ssl.key-store-password: ${server.ssl.key-store-password}
    server.ssl.trust-store: file:/etc/secret-keystores/server-truststore.jks
    #server.ssl.trust-store-password: file:/etc/secret-passwords/server.ssl.trust-store-password
    #server.ssl.trust-store-password: ${server.ssl.trust-store-password}

    # Mutual SSL, Client Cert Mandatory
    server.ssl.client-auth: need
    server.ssl.ciphers = TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_3DES_EDE_CBC_SHA
    server.ssl.protocol = TLSv1.2

    logging.level.org.springframework.security: DEBUG